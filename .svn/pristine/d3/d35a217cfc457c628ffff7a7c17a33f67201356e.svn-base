package com.yibairun.ui.fragment;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.format.DateUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.android.volley.Response;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.yibairun.R;
import com.yibairun.adapter.ProductAdapter;
import com.yibairun.bean.Product;
import com.yibairun.bean.ProductList;
import com.yibairun.comm.Constant;
import com.yibairun.ui.activity.ProductDetailGraphActivity;
import com.yibairun.utils.VolleyErrorHelper;

public class ProductFragment extends BaseFragment {
    private static final String ARG_SECTION_NUMBER = "section_number";
    private PullToRefreshListView mPullToRefreshListView;
    private View rootView;
    private Context context;
    private ProductAdapter productAdapter;
    private ProductList mProductList;
    private int page;
    private View footerView;

    public static ProductFragment newInstance(int sectionNumber) {
        ProductFragment fragment = new ProductFragment();
        Bundle args = new Bundle();
        args.putInt(ARG_SECTION_NUMBER, sectionNumber);
        fragment.setArguments(args);
        
        return fragment;
    }

    public ProductFragment() {
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        context = getActivity();
        rootView = inflater.inflate(R.layout.fragment_product, container, false);
        mPullToRefreshListView = (PullToRefreshListView) rootView.findViewById(R.id.lv_product);
        footerView = getActivity().getLayoutInflater().inflate(R.layout.pending, null);
        mPullToRefreshListView.getRefreshableView().addFooterView(footerView);
        pending_view = (RelativeLayout) rootView.findViewById(R.id.pending_view);
        pending_view.setVisibility(View.VISIBLE);

        initListener();
        return rootView;
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        api.productOperations().getProductList(createMyReqSuccessListener(), createMyReqErrorListener(), ++page);
    }

    @Override
    public void onResume() {
    	// TODO Auto-generated method stub
    	super.onResume();

    }


    private void initListener() {
        // TODO Auto-generated method stub
 /*       mPullToRefreshListView.setOnScrollListener(new EndlessScrollListener() {
            @Override
            public void onLoadMore(int page, int totalItemsCount) {
                // Triggered only when new data needs to be appended to the list
                // Add whatever code is needed to append new items to your AdapterView
//                customLoadMoreDataFromApi(page);
                // or customLoadMoreDataFromApi(totalItemsCount);
//                api.productOperations().getProductList(createMyReqSuccessListener(), createMyReqErrorListener(),page);
            }
        });*/
        // Add an end-of-list listener
        mPullToRefreshListView.setOnLastItemVisibleListener(new PullToRefreshBase.OnLastItemVisibleListener() {

            @Override
            public void onLastItemVisible() {
//                Toast.makeText(context, "loading", Toast.LENGTH_SHORT).show();
                api.productOperations().getProductList(createMyReqSuccessListener(), createMyReqErrorListener(), ++page);
            }
        });

        ListView actualListView = mPullToRefreshListView.getRefreshableView();
        mPullToRefreshListView.setOnRefreshListener(new OnRefreshListener<ListView>() {
            @Override
            public void onRefresh(PullToRefreshBase<ListView> refreshView) {
                String label = DateUtils.formatDateTime(context, System.currentTimeMillis(), DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_ABBREV_ALL);

                refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);
                api.productOperations().getProductList(createMyReqSuccessListener(), createMyReqErrorListener(), page = 1);
        
            }

        });

        actualListView.setOnItemClickListener(new OnItemClickListener() {

        	@Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
               Product product = (Product) parent.getItemAtPosition(position);
                Intent intent = new Intent();
                Bundle mBundle = new Bundle();
				mBundle.putSerializable(Constant.PRODUCT, product);
				intent.putExtras(mBundle);
                intent.setClass(context, ProductDetailGraphActivity.class);
                //intent.putExtra(Constant.PRODUCT_ID, product.getId());
                context.startActivity(intent);
            }
        });
    }

    private void initDate() {
        productAdapter = new ProductAdapter(context, mProductList);
        mPullToRefreshListView.setAdapter(productAdapter);

    }

    private Listener<ProductList> createMyReqSuccessListener() {
        return new Listener<ProductList>() {
            @Override
            public void onResponse(ProductList response) {
                pending_view.setVisibility(View.GONE);
                mPullToRefreshListView.onRefreshComplete();
                mProductList = response;
                if (page == 1 || mPullToRefreshListView.getRefreshableView().getAdapter() == null) {
                    initDate();
                } else productAdapter.addData(mProductList.getProductList());
//                dobList.finishLoading();

            }
        };
    }

    protected Response.ErrorListener createMyReqErrorListener() {
        return new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            	 mPullToRefreshListView.onRefreshComplete();
                pending_view.setVisibility(View.GONE);
				/* ErrorMessage msg = (ErrorMessage) error; */
                Toast.makeText(context, VolleyErrorHelper.getMessage(error, context), Toast.LENGTH_SHORT).show();
            }
        };
    }
}
