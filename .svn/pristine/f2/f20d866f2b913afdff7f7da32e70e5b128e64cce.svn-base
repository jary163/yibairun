package com.yibairun.ui.fragment;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.util.SparseArrayCompat;
import android.support.v4.view.ViewPager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.Response.ErrorListener;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.ImageRequest;
import com.android.volley.toolbox.Volley;
import com.nineoldandroids.view.ViewHelper;
import com.yibairun.R;
import com.yibairun.application.AppController;
import com.yibairun.bean.User;
import com.yibairun.bean.UserInfo;
import com.yibairun.comm.Constant;
import com.yibairun.ui.activity.LoginActivity;
import com.yibairun.ui.activity.PersonMsgActivity;
import com.yibairun.ui.activity.RechargeActivity;
import com.yibairun.ui.components.CameraDialog;
import com.yibairun.ui.components.CameraDialog.CameraListener;
import com.yibairun.ui.components.PagerSlidingTabStrip;
import com.yibairun.ui.fragment.InvestFragment.InvestType;
import com.yibairun.utils.BankUtils;
import com.yibairun.utils.BitmapUtils;
import com.yibairun.utils.VolleyErrorHelper;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;

public class PersonalFragment extends BaseFragment implements ScrollTabHolder, ViewPager.OnPageChangeListener {
    private static final String ARG_SECTION_NUMBER = "section_number";
    private View rootView;
    private ViewPager pager;
    private Context context;
    private UserInfo mUserInfo;
    private ImageView iv_recharge, iv_head,iv_person_msg,iv_goto_login;
    private TextView tv_number, tv_balance, tv_expected_return, tv_inveting, tv_accrued_income, tv_recommend_nums, tv_accumulative_total;
    private TypedValue mTypedValue = new TypedValue();

    private PagerSlidingTabStrip tabs;
    private DisplayMetrics dm;
    private int mHeaderHeight;
    private int mActionBarHeight;
    private int mMinHeaderHeight;
    private int mMinHeaderTranslation;
    private View mHeader,login_view;
    private TabPageIndicatorAdapter adapter;
	private CameraDialog calculateDialog;
	private String imgHeadPath;
	private String camera;

    public static PersonalFragment newInstance(int sectionNumber) {
        PersonalFragment fragment = new PersonalFragment();
        Bundle args = new Bundle();
        args.putInt(ARG_SECTION_NUMBER, sectionNumber);
        fragment.setArguments(args);
        return fragment;
    }

    public PersonalFragment() {

    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        context = getActivity();
        dm = getResources().getDisplayMetrics();
        mMinHeaderHeight = getResources().getDimensionPixelSize(R.dimen.min_header_height);
        mHeaderHeight = getResources().getDimensionPixelSize(R.dimen.header_height);
        mMinHeaderTranslation = -mMinHeaderHeight;
    }

    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
    public int getActionBarHeight() {
        if (mActionBarHeight != 0) {
            return mActionBarHeight;
        }

        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {
            context.getTheme().resolveAttribute(android.R.attr.actionBarSize, mTypedValue, true);
        } else {
//            context.getTheme().resolveAttribute(R.attr.actionBarSize, mTypedValue, true);//换为v7再打开
        }

        mActionBarHeight = TypedValue.complexToDimensionPixelSize(mTypedValue.data, getResources().getDisplayMetrics());

        return mActionBarHeight;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    	super.onCreateView(inflater, container, savedInstanceState);
        rootView = inflater.inflate(R.layout.fragment_person, container, false);
        initView();
        initListener();
        return rootView;
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

    }

    @Override
    public void onResume() {
    	super.onResume();
    	if(TextUtils.isEmpty(appController.getAppKey())){
            login_view.setVisibility(View.VISIBLE);
            pager.setVisibility(View.GONE);
            mHeader.setVisibility(View.GONE);
            onFagmentlistener.OnLoginListener(false);
    	}else{
    		login_view.setVisibility(View.GONE);
    		pending_view.setVisibility(View.VISIBLE);
            pager.setVisibility(View.VISIBLE);
            mHeader.setVisibility(View.VISIBLE);
    		/**获取用户详细信息*/
    		api.userOperations().getUserInfo(createMyReqSuccessListener(), createMyReqErrorListener(), appController.getAppKey());
    	}
    }
    
    /**
     * 判断appkey是否存在，如果不存在，这跳转到登录界面
     */
    private void judgeAppkeyInfo() {
		if(TextUtils.isEmpty(appController.getAppKey())){
			startActivity(LoginActivity.class);
		}
	}

	@SuppressLint("NewApi")
    private void initView() {
        pager = (ViewPager) rootView.findViewById(R.id.pager);
//		indicator = (TabPageIndicator) rootView.findViewById(R.id.indicator);
        tabs = (PagerSlidingTabStrip) rootView.findViewById(R.id.tabs);
        iv_goto_login = (ImageView) rootView.findViewById(R.id.iv_goto_login);
        tv_number = (TextView) rootView.findViewById(R.id.tv_number);
        tv_balance = (TextView) rootView.findViewById(R.id.tv_balance);
        tv_expected_return = (TextView) rootView.findViewById(R.id.tv_expected_return);
        tv_inveting = (TextView) rootView.findViewById(R.id.tv_investing);
        tv_accrued_income = (TextView) rootView.findViewById(R.id.tv_accrued_income);
        tv_recommend_nums = (TextView) rootView.findViewById(R.id.tv_recommend_nums);
        tv_accumulative_total = (TextView) rootView.findViewById(R.id.tv_accumulative_total);
        pending_view = (RelativeLayout) rootView.findViewById(R.id.pending_view);
        iv_recharge = (ImageView) rootView.findViewById(R.id.iv_recharge);
        iv_head = (ImageView) rootView.findViewById(R.id.iv_head); 
        iv_person_msg = (ImageView) rootView.findViewById(R.id.iv_person_msg);
        login_view = rootView.findViewById(R.id.login_view);
//        pending_view.setVisibility(View.VISIBLE);
        mHeader = rootView.findViewById(R.id.header);
        adapter = new TabPageIndicatorAdapter(getChildFragmentManager());
       
        adapter.setTabHolderScrollingContent(this);
        pager.setAdapter(adapter);
        pager.setOffscreenPageLimit(2);
        
        tabs.setViewPager(pager);
        tabs.setOnPageChangeListener(this);
//        tabs.setTabsValue(dm);
       
        
		calculateDialog = new CameraDialog(context,R.style.CalculateDialog);
        
    }

    private void initDate() {
        User user = mUserInfo.getUser();
        camera = AppController.getInstance().getUserHeadSavePath();
        tv_number.setText(BankUtils.formatMobileNum(user.getMobile(),3,7));
        tv_balance.setText(String.valueOf(user.getMoney()));
        tv_expected_return.setText(String.valueOf(user.getUserinvest()));
        tv_inveting.setText(String.valueOf(user.getInvestmoney()));
        tv_accrued_income.setText(String.valueOf(user.getBonusmoney()));
        tv_recommend_nums.setText(String.valueOf(user.getFritotal()));
        tv_accumulative_total.setText(String.valueOf(user.getRebatemoney()));

        setHeadImg(user.getImg());
    }

    private void initListener() {
        iv_recharge.setOnClickListener(this);
        iv_person_msg.setOnClickListener(this);
        iv_head.setOnClickListener(this);
        iv_goto_login.setOnClickListener(this);
        
        calculateDialog.setmCameraListener(new CameraListener() {
			
			@Override
			public void onPhonePicClicked() {
				calculateDialog.dismiss();
				getImageFromCamera();
			}
			@Override
			public void onDcimClicked() {
				calculateDialog.dismiss();
				getImageFromAlbum();
			}
		});
        
    }
    
    /**
     * 从系统相册获取照片
     */
    protected void getImageFromAlbum() {
        Intent intent = new Intent(Intent.ACTION_PICK);
        intent.setType("image/*");//相片类型
        startActivityForResult(intent, Constant.REQUEST_CODE_PICK_IMAGE);
    }
    
    /**
     * 从照相机获取
     */
    protected void getImageFromCamera() {
        String state = Environment.getExternalStorageState();
        if (state.equals(Environment.MEDIA_MOUNTED)) {
            Intent intent1 = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            intent1.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(new File(camera)));
            intent1.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 0);
            startActivityForResult(intent1, Constant.REQUEST_CODE_CAPTURE_CAMEIA);
        }
        else {
            Toast.makeText(context.getApplicationContext(), "请确认已经插入SD卡", Toast.LENGTH_LONG).show();
        }
    }
    

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		Uri uri = null;
		if (requestCode == Constant.REQUEST_CODE_PICK_IMAGE&&null!=data&&null!=data.getData()) {
			uri = data.getData();
			// to do find the path of pic by uri
			findPathFromUrl(uri);
			Bitmap bitmap = BitmapUtils.compressFile(imgHeadPath,camera,Constant.PIC_HEAD_HEIGHT,Constant.PIC_HEAD_WIDTH,Constant.PIC_HEAD_SIZE);
			Log.e("main", "PICK_IMAGE_uri:"+uri);
			uploadFile(AppController.getInstance().getUserHeadSavePath());
		} else if (requestCode == Constant.REQUEST_CODE_CAPTURE_CAMEIA) {
			Bitmap bitmap = BitmapUtils.compressFile(camera,Constant.PIC_HEAD_HEIGHT,Constant.PIC_HEAD_WIDTH,Constant.PIC_HEAD_SIZE);
			uploadFile(AppController.getInstance().getUserHeadSavePath());
		}

	}
	
	public void findPathFromUrl(Uri uri){
		if(uri==null){
			return;
		}
		String[] proj = {MediaStore.Images.Media.DATA};
		 
        //好像是android多媒体数据库的封装接口，具体的看Android文档
		Cursor cursor = context.getContentResolver().query(uri, proj, null, null, null);
        //按我个人理解 这个是获得用户选择的图片的索引值
        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        //将光标移至开头 ，这个很重要，不小心很容易引起越界
        cursor.moveToFirst();
        //最后根据索引值获取图片路径
        imgHeadPath = cursor.getString(column_index);
	}
	
	/**
	 * 文件上传
	 * @param str
	 */
	public void uploadFile(final String str){
		pg.setTitle("正在上传图片");
		//pg.show();
		File file = new File(str);
		if(file.exists()){
			api.userOperations().uploadAvatvar(new Listener<String>() {

				@Override
				public void onResponse(String response) {
					pg.hide();
					Toast.makeText(context, "图片上传成功", Toast.LENGTH_SHORT).show();
				}
			}, new ErrorListener() {

				@Override
				public void onErrorResponse(VolleyError error) {
					pg.hide();
					Log.e("main", "case:"+error.getCause()+"   message:"+error.getMessage());
					Toast.makeText(context, "图片上传失败,请稍后重试", Toast.LENGTH_SHORT).show();
				}
			}, appController.getAppKey(), file);
		}else{
			Toast.makeText(context, "图片上传失败", Toast.LENGTH_SHORT).show();
		}
		
		
	}
	
	public  boolean saveImage(Bitmap photo, String spath) {
        try {
        	BitmapUtils.compressImage(photo,100);
            BufferedOutputStream bos = new BufferedOutputStream(
                    new FileOutputStream(spath, false));
            photo.compress(Bitmap.CompressFormat.JPEG, 20, bos);
            bos.flush();
            bos.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
	/**
	 * 设置用户图像
	 * @param imgurl
	 */
	public void setHeadImg(String imgurl){
		RequestQueue mQueue = Volley.newRequestQueue(context);
		ImageRequest imageRequest = new ImageRequest(
				imgurl,
				new Response.Listener<Bitmap>() {
					@Override
					public void onResponse(Bitmap response) {
						iv_head.setImageBitmap(response);
					}
				}, 0, 0, Config.RGB_565, new Response.ErrorListener() {
					@Override
					public void onErrorResponse(VolleyError error) {
						if(new File(AppController.getInstance().getUserHeadSavePath()).exists()){
							iv_head.setImageBitmap(BitmapFactory.decodeFile(AppController.getInstance().getUserHeadSavePath()));//手机拍照之后直接将其作为图像显示
						}else{
							iv_head.setImageResource(R.drawable.person_head);
						}
					}
				});
		mQueue.add(imageRequest);
		Log.e("main", "imgUrl:"+imgurl);
        //ImageCacheManager.getInstance().getImage(imgurl, ImageLoader.getImageListener(iv_head,R.drawable.person_head,R.drawable.person_head));
	}
    

    @Override
    public void onClick(View v) {
        super.onClick(v);
        switch (v.getId()) {
            case R.id.iv_recharge:
                startActivity(RechargeActivity.class);
                break;
            case R.id.iv_person_msg:
            	Intent intent = new Intent();
            	intent.putExtra(Constant.ACTIVITY_TYPE,Constant.FRAGMENT_PERSONAL);
            	startActivity(PersonMsgActivity.class,intent);
            	break;
            case R.id.iv_head:
            	calculateDialog.show();
            	break;
            case R.id.iv_goto_login:
            	startActivity(LoginActivity.class);
            default:
                break;
        }
    }

    private Listener<UserInfo> createMyReqSuccessListener() {
        return new Listener<UserInfo>() {
            @Override
            public void onResponse(UserInfo response) {
                pending_view.setVisibility(View.GONE);
                login_view.setVisibility(View.GONE);
                appController.setUserinfo(response);
                mUserInfo = response;
                initDate();
                onFagmentlistener.OnLoginListener(true);
            }
        };
    }

    protected Response.ErrorListener createMyReqErrorListener() {
        return new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                pending_view.setVisibility(View.GONE);
				/* ErrorMessage msg = (ErrorMessage) error; */
                if(!TextUtils.isEmpty(appController.getAppKey())){
                	Toast.makeText(context, VolleyErrorHelper.getMessage(error, context), Toast.LENGTH_SHORT).show();
                }
                appController.setAppKey(null);	//TODO 登录超时，显示登录界面
                login_view.setVisibility(View.VISIBLE);
                onFagmentlistener.OnLoginListener(false);
            }
        };
    }

    @Override
    public void adjustScroll(int scrollHeight) {

    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount, int pagePosition) {
        if (pager.getCurrentItem() == pagePosition) {
            int scrollY = getScrollY(view);
            ViewHelper.setTranslationY(mHeader, Math.max(-scrollY, mMinHeaderTranslation));
        }
    }

    public int getScrollY(AbsListView view) {
        View c = view.getChildAt(0);
        if (c == null) {
            return 0;
        }

        int firstVisiblePosition = view.getFirstVisiblePosition();
        int top = c.getTop();

        int headerHeight = 0;
        if (firstVisiblePosition >= 1) {
            headerHeight = mHeaderHeight;
        }

        return -top + firstVisiblePosition * c.getHeight() + headerHeight;
    }

    @Override
    public void onPageScrolled(int i, float v, int i2) {

    }

    @Override
    public void onPageSelected(int position) {
        SparseArrayCompat<ScrollTabHolder> scrollTabHolders = adapter.getScrollTabHolders();
        ScrollTabHolder currentHolder = scrollTabHolders.valueAt(position);
        if(currentHolder!=null)
        currentHolder.adjustScroll((int) (mHeader.getHeight() + ViewHelper.getTranslationY(mHeader)));
    }

    @Override
    public void onPageScrollStateChanged(int i) {

    }

    /**
     * ViewPager适配器
     *
     * @author len
     */
    class TabPageIndicatorAdapter extends FragmentPagerAdapter {
        /**
         * Tab标题
         */
        private final String[] TITLE = new String[]{"投资中", "已结束"};
        private SparseArrayCompat<ScrollTabHolder> mScrollTabHolders;
        private ScrollTabHolder mListener;

        public TabPageIndicatorAdapter(FragmentManager fm) {
            super(fm);
            mScrollTabHolders = new SparseArrayCompat<ScrollTabHolder>();
        }

        public void setTabHolderScrollingContent(ScrollTabHolder listener) {
            mListener = listener;
        }

        @Override
        public Fragment getItem(int position) {
        	ScrollTabHolderFragment fragment;
        	if(position==0){
        		fragment = (ScrollTabHolderFragment) InvestFragment.newInstance(position,InvestType.INVESTING);
        	}else{
        		fragment = (ScrollTabHolderFragment) InvestFragment.newInstance(position,InvestType.INVESTED);////目前好像没有数据，用投资中的数据来测试
        	}
            mScrollTabHolders.put(position, fragment);
            if (mListener != null) {
                fragment.setScrollTabHolder(mListener);
            }

            return fragment;
        }

        @Override
        public int getCount() {
            return TITLE.length;
        }

        @Override
        public CharSequence getPageTitle(int position) {

            return TITLE[position];
        }

        public SparseArrayCompat<ScrollTabHolder> getScrollTabHolders() {
            return mScrollTabHolders;
        }

    }

}
